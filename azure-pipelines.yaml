name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.8.10'
  group: 'ssh-config' 
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'TEST'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Download file terraform.tfvars from pipeline library
    - task: DownloadSecureFile@1
      name: terraform
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    #copy terraform.tfvars to project folder
    - task: Bash@3
      displayName: Copy terraform.tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test

    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2296520255'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(knownHostsEntry)'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCmAdaxV11RELCMOP20P59nI8eQCt974eWM8s3CKTD6FleButQtB1yiqh0aTzR9QClO10denTNlQt0EVrXFc1lrsApuRtNM/BQNfc4ervuCMFjVxndGyyqGlHf3e+qZyjbFTw08sOt0lfNf6Yavs0Cb98lsxB0dBzP4YB8l5NvprSKpnMoOY06/eUm9hjkizeqZQIQLTrB5w6m828eGK1FPTlXplnbo2bjzm0opple7AWKf+NrrstpfnArDq6F5MiizlflErpIeLG9wRaZZcwy2joZak2MOq5GWa+bmWMenDgnF79rPswMV4a+KR7J2JNUMNamOiFjQBgY25uRMYoHCScadK8pV+lRQCkGIOyy+nRGlL6QcghPB53A4Gagnp/cucRzxSxGSlTpgvm0o2C/SA0ruOR+0pwXQZCkDNsg1VMmQ1KuxNH581cwEdW4bop9ScQ7awlqC6jUepLI7G9vLUkfFmyA7EaUixh50mkMcNm6xOUG8jXNSO8MLoPFBf10= azureuser@tunhl-LinuxVm'
        sshKeySecureFile: 'tunhl-LinuxVm_key.pem' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
  
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    # Run Terraform Plan
    - task: TerraformTaskV3@3
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # - task: CmdLine@2
    #   displayName: Build FakeResrAPI
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       python3 -m venv antenv
    #       source antenv/bin/activate
    #       python3 -m pip install --upgrade pip
    #       pip install setup
    #       pip install -r requirements.txt
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/FakeRestAPI'
    # - task: CmdLine@2
    #   displayName: Run lint test FakeResrAPI
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       python -m venv antenv
    #       source antenv/bin/activate
    #       make install
    #       make lint
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/FakeRestAPI'
  
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.BuildId)-FakeRestAPI.zip'
    - task: PublishPipelineArtifact@1
      displayName: Upload package
      inputs:   
        targetPath: $(Build.BuildId)-FakeRestAPI.zip
        artifact: drop-FakeRestAPI

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.BuildId)-jmeter.zip'
        replaceExistingArchive: true
    # JMeter Test Suite - Publish    
    - task: PublishPipelineArtifact@1
      displayName: Upload Jmeter
      inputs:
        targetPath: $(Build.BuildId)-jmeter.zip
        artifact: drop-jmeter

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.BuildId)-selenium.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      displayName: Upload Selenium
      inputs:
        targetPath: $(Build.BuildId)-selenium.zip
        artifact: drop-selenium
    # install node
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'npm install'
    - script: |
        node -v
        npm install -g newman
        mkdir -p log/newman
        newman -v
      displayName: Install Newman

      # Postman Regression Test Suite    
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: |
          newman run regressionDummyRestAPI.json -e Env.RegressionTest.json --reporters cli,junit --reporter-junit-export log/newman/RegressionTest.xml --suppress-exit-code
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman Data Validation Test Suite    
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script:  |
          newman run validationDummyRestAPI.json -e Env.ValidationTest.json --reporters cli,junit --reporter-junit-export log/newman/ValidationTest.xml --suppress-exit-code
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/log/newman'
        mergeTestResults: true
        testRunTitle:  'Test result for postman'

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'      
    environment: TEST
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription:  '$(azureServiceConnectionId)'
              appName: 'ensuring-quality-project-AppService'               # ToDo
              appType: webApp
              package: $(Pipeline.Workspace)/drop-FakeRestAPI/$(Build.BuildId)-FakeRestAPI.zip       # ToDo: Use the published zip artifact. 
              deploymentMethod: auto 
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: TEST
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-selenium
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-driver
                sudo -H pip3 install --upgrade pip
                pip install -U selenium
                echo "python version:"
                python3 --version 
                export PATH=$PATH:/usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version

                cd $(Pipeline.Workspace)/drop-selenium
                unzip -o $(Build.BuildId)-selenium.zip
                sudo mkdir -p /var/log/selenium
                sudo chmod 664 /var/log/selenium
                python3 login.py > selenium-logs.log
                sudo mv selenium-logs.log /var/log/selenium
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                sudo cp /var/log/selenium/selenium-logs.log log/selenium
          - task: PublishPipelineArtifact@1
            displayName: Publish selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-logs.log'
              artifactName: 'drop-selenium-logs'

          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - download: current
            artifact: drop-jmeter

          # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.  
          # ToDo: Generate the log file. 
          - task: CmdLine@2
            displayName: Install JMeter 
            inputs:
              script: |
                sudo apt-get install openjdk-11-jre-headless -y
                java -version
                wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
                tar xzvf jmeter.tgz
                echo "####################"
                echo "jmeter version : " 
                apache-jmeter-5.5/bin/jmeter --version   
                echo "####################"
                pwd
                mkdir -p log/jmeter
                cd $(Pipeline.Workspace)/drop-jmeter
                unzip -o $(Build.BuildId)-jmeter.zip
          - task: CmdLine@2
            displayName: Stress Test and Endurance test
            inputs:
              script: |
                apache-jmeter-5.5/bin/jmeter -n -t $(Pipeline.Workspace)/drop-jmeter/ActivitiesStressTest.jmx -l log/jmeter/stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report -j log/jmeter/jmeter-stress-test.log
                cat log/jmeter/jmeter-stress-test.log
                apache-jmeter-5.5/bin/jmeter -n -t $(Pipeline.Workspace)/drop-jmeter/ActivitiesEnduranceTest.jmx -l log/jmeter/endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report -j log/jmeter/jmeter-endurance-test.log
                cat log/jmeter/jmeter-endurance-test.log
          - task: ArchiveFiles@2
            displayName: Archive Stress Test Results
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
              includeRootFolder: false
              archiveType: zip
              archiveFile: stress-test-html-report.zip'
              verbose: true
          - task: ArchiveFiles@2
            displayName: Public stress-test
            inputs:
              targetPath: stress-test-html-report.zip
              artifact: drop-stress-test-html-report
        
          - task: ArchiveFiles@2
            displayName: Archive endurance-test
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: 'endurance-test-html-report.zip'
              verbose: true
          - task: ArchiveFiles@2
            displayName: Publish Endurance Test Results
            inputs:   
              targetPath: endurance-test-html-report.zip
              artifact: drop-endurance-test-html-report
          - task: PublishPipelineArtifact@1
            displayName: Publish jmeter logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'drop-jmeter-logs'
    